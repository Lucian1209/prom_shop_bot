require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º –∑ .env
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const adminModule = require('./admin'); // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const adminOrders = [];

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const userStates = {};
const userOrders = {};

const lastMessages = {};
const mainMenu = {
  reply_markup: {
    keyboard: [
      ['üõç –ö–∞—Ç–∞–ª–æ–≥', 'üì¶ –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'],
      ['‚òéÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞', 'üìñ –î–æ–ø–æ–º–æ–≥–∞']
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

const catalogMenu = {
  reply_markup: {
    keyboard: [
      ['üìÑ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤', 'üîç –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É'],
      ['üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Prom.ua
async function getCatalogProducts(limit = 10) {
  try {
    const response = await axios.get('https://my.prom.ua/api/v1/products/list', {
      headers: {
        Authorization: `Bearer ${process.env.PROM_TOKEN}`
      },
      params: {
        limit,
        presence: 'available' // –¢—ñ–ª—å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏
      }
    });
    
    return response.data.products || [];
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É:', error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä –ø–æ ID
async function getProductInfo(productId) {
  try {
    const response = await axios.get(`https://my.prom.ua/api/v1/products/${productId}`, {
      headers: {
        Authorization: `Bearer ${process.env.PROM_TOKEN}`
      }
    });
    
    return response.data.product;
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä ${productId}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ API Prom.ua
async function createOrder(orderData) {
  try {
    const response = await axios.post('https://my.prom.ua/api/v1/orders', {
      order: {
        client_first_name: orderData.name,
        client_phone: orderData.phone,
        shipping_address: orderData.address,
        payment_option: "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ",
        products: [
          {
            id: orderData.productId,
            quantity: 1
          }
        ]
      }
    }, {
      headers: {
        Authorization: `Bearer ${process.env.PROM_TOKEN}`
      }
    });
    
    return response.data;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error.message);
    return null;
  }
}

// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = 'main_menu';
  
  bot.sendMessage(chatId, 
    'üëã *–í—ñ—Ç–∞—î–º–æ —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ!*\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä —ñ–∑ –∫–∞—Ç–∞–ª–æ–≥—É, —ñ –º–∏ —à–≤–∏–¥–∫–æ –¥–æ—Å—Ç–∞–≤–∏–º–æ –π–æ–≥–æ –≤–∞–º.', 
    Object.assign({ parse_mode: 'Markdown' }, mainMenu)
  );
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const userId = msg.from.id;
  
  // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
  if (text && text.startsWith('/')) {
    return;
  }
  
  const currentState = userStates[chatId] || 'main_menu';
  
  switch (text) {
    case 'üõç –ö–∞—Ç–∞–ª–æ–≥':
      userStates[chatId] = 'catalog';
      bot.sendMessage(chatId, 
        'üìÇ *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', 
        Object.assign({ parse_mode: 'Markdown' }, catalogMenu)
      );
      break;
      
    case 'üìÑ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤':
      if (currentState === 'catalog') {
        await showProductsList(chatId);
      }
      break;
      
    case 'üîç –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É':
      if (currentState === 'catalog') {
        userStates[chatId] = 'search_product';
        bot.sendMessage(chatId, 
          'üîç *–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–æ—à—É–∫—É:', 
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']],
              resize_keyboard: true
            }
          }
        );
      }
      break;
      
    case 'üì¶ –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è':
      bot.sendMessage(chatId, 
        'üì¶ *–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', 
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']],
            resize_keyboard: true
          }
        }
      );
      userStates[chatId] = 'track_order';
      break;
      
    case '‚òéÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞':
      bot.sendMessage(chatId, 
        '*üìû –ù–∞—à–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞:*\n\n‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: @josnik_lamer\n‚Ä¢ Email: support@example.com\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +380669419224\n\n–ú–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ –≤–∞–º —É –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω!', 
        Object.assign({ parse_mode: 'Markdown' }, mainMenu)
      );
      userStates[chatId] = 'main_menu';
      break;
      
    case 'üìñ –î–æ–ø–æ–º–æ–≥–∞':
      bot.sendMessage(chatId, 
        'üìñ *–î–æ–≤—ñ–¥–∫–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞:*\n\n‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥" –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—ñ–≤\n‚Ä¢ –û–±–µ—Ä—ñ—Ç—å "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤" –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ "–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É" –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É\n‚Ä¢ –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∞—Å –ø–æ–ø—Ä–æ—Å—è—Ç—å –≤–∫–∞–∑–∞—Ç–∏ —ñ–º\'—è, —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏\n‚Ä¢ –ü—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≤–∞–º–∏ –∑–≤\'—è–∂–µ—Ç—å—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä\n\n–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞".', 
        Object.assign({ parse_mode: 'Markdown' }, mainMenu)
      );
      userStates[chatId] = 'main_menu';
      break;
      
    case 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
      userStates[chatId] = 'main_menu';
      bot.sendMessage(chatId, 
        'üè† *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', 
        Object.assign({ parse_mode: 'Markdown' }, mainMenu)
      );
      break;
      
    case '‚óÄÔ∏è –ù–∞–∑–∞–¥':
      if (currentState === 'view_products') {
        userStates[chatId] = 'catalog';
        bot.sendMessage(chatId, 
          'üìÇ *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', 
          Object.assign({ parse_mode: 'Markdown' }, catalogMenu)
        );
      }
      break;
      
    default:
      await handleUserInput(chatId, text, currentState);
      break;
  }
});

// –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function handleUserInput(chatId, text, currentState) {
  switch (currentState) {
    case 'search_product':
      await searchProducts(chatId, text);
      break;
      
    case 'track_order':
      await trackOrder(chatId, text);
      break;
      
    case 'order_name':
      userOrders[chatId].name = text;
      userStates[chatId] = 'order_phone';
      bot.sendMessage(chatId, 
        `–î—è–∫—É—î–º–æ, *${text}*!\n\n–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:`, 
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']],
            resize_keyboard: true
          }
        }
      );
      break;
      
    case 'order_phone':
      userOrders[chatId].phone = text;
      userStates[chatId] = 'order_address';
      bot.sendMessage(chatId, 
        '–ß—É–¥–æ–≤–æ! –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:', 
        { 
          reply_markup: {
            keyboard: [['üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']],
            resize_keyboard: true
          }
        }
      );
      break;
      
    case 'order_address':
      userOrders[chatId].address = text;
      await processOrder(chatId);
      break;
      
    default:
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏
      if (text.match(/^\d+$/)) {
        await handleProductSelection(chatId, text, currentState);
      } else {
        bot.sendMessage(chatId, 
          '‚ùì –ù–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.', 
          Object.assign({}, getMenuForState(currentState))
        );
      }
      break;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–Ω—é –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É
function getMenuForState(state) {
  switch (state) {
    case 'catalog':
      return catalogMenu;
    case 'view_products':
      return {
        reply_markup: {
          keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']],
          resize_keyboard: true
        }
      };
    default:
      return mainMenu;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
async function showProductsList(chatId) {
  const loadingMsg = await bot.sendMessage(chatId, '‚è≥ *–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤...*', {
    parse_mode: 'Markdown'
  });
  
  try {
    const products = await getCatalogProducts(20);
    
    if (!products || products.length === 0) {
      await bot.editMessageText('üòî –ù–∞ –∂–∞–ª—å, —Ç–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', {
        chat_id: chatId,
        message_id: loadingMsg.message_id
      });
      return;
    }
    
    await bot.deleteMessage(chatId, loadingMsg.message_id);
    
    let productList = '*üìÑ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:*\n\n';
    
    products.forEach((product, index) => {
      const price = product.price ? `${product.price} –≥—Ä–Ω` : '–¶—ñ–Ω–∞ –∑–∞ –∑–∞–ø–∏—Ç–æ–º';
      const availability = product.presence === 'available' ? '‚úÖ' : '‚åõ';
      productList += `${index + 1}. *${product.name}*\n   üí∞ ${price} ${availability}\n\n`;
    });
    
    productList += `\nüìù *–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:*\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É (1-${products.length}) –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è`;
    
    bot.sendMessage(chatId, productList, {
      parse_mode: 'Markdown',
      reply_markup: {
        keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']],
        resize_keyboard: true
      }
    });
    
    userStates[chatId] = 'view_products';
    userOrders[chatId] = { products: products };
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥—É:', error.message);
    bot.editMessageText('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', {
      chat_id: chatId,
      message_id: loadingMsg.message_id
    });
  }
}

// –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
async function searchProducts(chatId, query) {
  const loadingMsg = await bot.sendMessage(chatId, 'üîç *–®—É–∫–∞—é —Ç–æ–≤–∞—Ä–∏...*', {
    parse_mode: 'Markdown'
  });
  
  try {
    const products = await getCatalogProducts(50);
    const filteredProducts = products.filter(product => 
      product.name.toLowerCase().includes(query.toLowerCase())
    );
    
    await bot.deleteMessage(chatId, loadingMsg.message_id);
    
    if (filteredProducts.length === 0) {
      bot.sendMessage(chatId, 
        `üòî –ó–∞ –∑–∞–ø–∏—Ç–æ–º "*${query}*" —Ç–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—Ç–µ –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥.`, 
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['üìÑ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤', 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']],
            resize_keyboard: true
          }
        }
      );
      userStates[chatId] = 'catalog';
      return;
    }
    
    let searchResults = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É "${query}":*\n\n`;
    
    filteredProducts.slice(0, 10).forEach((product, index) => {
      const price = product.price ? `${product.price} –≥—Ä–Ω` : '–¶—ñ–Ω–∞ –∑–∞ –∑–∞–ø–∏—Ç–æ–º';
      const availability = product.presence === 'available' ? '‚úÖ' : '‚åõ';
      searchResults += `${index + 1}. *${product.name}*\n   üí∞ ${price} ${availability}\n\n`;
    });
    
    if (filteredProducts.length > 10) {
      searchResults += `\n... —Ç–∞ —â–µ ${filteredProducts.length - 10} —Ç–æ–≤–∞—Ä—ñ–≤\n`;
    }
    
    searchResults += `\nüìù *–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:*\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É (1-${Math.min(filteredProducts.length, 10)}) –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è`;
    
    bot.sendMessage(chatId, searchResults, {
      parse_mode: 'Markdown',
      reply_markup: {
        keyboard: [['üîç –ù–æ–≤–∏–π –ø–æ—à—É–∫', 'üìÑ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤', 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']],
        resize_keyboard: true
      }
    });
    
    userStates[chatId] = 'view_products';
    userOrders[chatId] = { products: filteredProducts.slice(0, 10) };
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error.message);
    bot.editMessageText('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', {
      chat_id: chatId,
      message_id: loadingMsg.message_id
    });
  }
}

// –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—É
async function handleProductSelection(chatId, productNumber, currentState) {
  if (currentState !== 'view_products' || !userOrders[chatId] || !userOrders[chatId].products) {
    bot.sendMessage(chatId, 
      '‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤.', 
      Object.assign({}, mainMenu)
    );
    return;
  }
  
  const index = parseInt(productNumber) - 1;
  const products = userOrders[chatId].products;
  
  if (index < 0 || index >= products.length) {
    bot.sendMessage(chatId, 
      `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ ${products.length}.`
    );
    return;
  }
  
  const product = products[index];
  const price = product.price ? `${product.price} –≥—Ä–Ω` : '–¶—ñ–Ω–∞ –∑–∞ –∑–∞–ø–∏—Ç–æ–º';
  const availability = product.presence === 'available' ? '‚úÖ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' : '‚åõ –ü—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è';
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä
  let productInfo = `üõí *–¢–æ–≤–∞—Ä –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n*${product.name}*\n\nüí∞ *${price}*\n${availability}\n\n`;
  
  if (product.description) {
    productInfo += `üìù ${product.description.substring(0, 200)}${product.description.length > 200 ? '...' : ''}\n\n`;
  }
  
  if (product.vendor_code) {
    productInfo += `üè∑ –ê—Ä—Ç–∏–∫—É–ª: ${product.vendor_code}\n`;
  }
  
  if (product.brand) {
    productInfo += `üè¢ –ë—Ä–µ–Ω–¥: ${product.brand}\n`;
  }
  
  productInfo += '\n*–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?*';
  
  bot.sendMessage(chatId, productInfo, {
    parse_mode: 'Markdown',
    reply_markup: {
      keyboard: [
        ['‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'],
        ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  });
  
  userOrders[chatId].selectedProduct = product;
  userStates[chatId] = 'confirm_order';
}

// –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (text === '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' && userStates[chatId] === 'confirm_order') {
    userStates[chatId] = 'order_name';
    bot.sendMessage(chatId, 
      'üõí *–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n\n–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è:', 
      { 
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [['üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']],
          resize_keyboard: true
        }
      }
    );
  } else if (text === 'üîç –ù–æ–≤–∏–π –ø–æ—à—É–∫') {
    userStates[chatId] = 'search_product';
    bot.sendMessage(chatId, 
      'üîç *–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–æ—à—É–∫—É:', 
      { 
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [['üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']],
          resize_keyboard: true
        }
      }
    );
  }
});

// –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async function processOrder(chatId) {
  const orderData = userOrders[chatId];
  
  if (!orderData || !orderData.selectedProduct) {
    bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.', Object.assign({}, mainMenu));
    return;
  }
  
  const product = orderData.selectedProduct;
  
  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
  bot.sendMessage(chatId, '‚è≥ –û—Ñ–æ—Ä–º–ª—é—î–º–æ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ API
  const orderResult = await createOrder({
    name: orderData.name,
    phone: orderData.phone,
    address: orderData.address,
    productId: product.id
  });
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –∞–¥–º—ñ–Ω–∞
  const newOrder = {
    id: orderResult?.id || `temp_${Date.now()}`,
    product: product.name,
    name: orderData.name,
    phone: orderData.phone,
    address: orderData.address,
    date: new Date().toISOString()
  };
  
  adminOrders.push(newOrder);
  
  // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω–∞
  const adminText = `üÜï *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!*\n\nüì¶ –¢–æ–≤–∞—Ä: *${product.name}*\nüí∞ –¶—ñ–Ω–∞: ${product.price || '–∑–∞ –∑–∞–ø–∏—Ç–æ–º'} –≥—Ä–Ω\nüë§ –ö–ª—ñ—î–Ω—Ç: ${orderData.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}\nüè† –ê–¥—Ä–µ—Å–∞: ${orderData.address}`;
  
  if (process.env.ADMIN_CHAT_ID) {
    bot.sendMessage(process.env.ADMIN_CHAT_ID, adminText, {
      parse_mode: 'Markdown'
    });
  }
  
  // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞
  bot.sendMessage(chatId, 
    `‚úÖ *–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!*\n\nüì¶ –¢–æ–≤–∞—Ä: *${product.name}*\nüí∞ –¶—ñ–Ω–∞: ${product.price || '–∑–∞ –∑–∞–ø–∏—Ç–æ–º'} –≥—Ä–Ω\nüë§ –Ü–º'—è: ${orderData.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}\nüè† –ê–¥—Ä–µ—Å–∞: ${orderData.address}\n\n–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üôè`, 
    Object.assign({ parse_mode: 'Markdown' }, mainMenu)
  );
  
  // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  userStates[chatId] = 'main_menu';
  delete userOrders[chatId];
}

// –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async function trackOrder(chatId, orderNumber) {
  // –¢—É—Ç –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ API Prom.ua
  bot.sendMessage(chatId, 
    `üì¶ *–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderNumber}*\n\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –Ω–∞—à–∏–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏.\n–ó –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n–î–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.`, 
    Object.assign({ parse_mode: 'Markdown' }, mainMenu)
  );
  
  userStates[chatId] = 'main_menu';
}

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, 
    'üìñ *–î–æ–≤—ñ–¥–∫–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞:*\n\n‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥" –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—ñ–≤\n‚Ä¢ –û–±–µ—Ä—ñ—Ç—å "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤" –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ "–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É" –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É\n‚Ä¢ –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∞—Å –ø–æ–ø—Ä–æ—Å—è—Ç—å –≤–∫–∞–∑–∞—Ç–∏ —ñ–º\'—è, —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏\n‚Ä¢ –ü—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≤–∞–º–∏ –∑–≤\'—è–∂–µ—Ç—å—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä\n\n–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞".', 
    Object.assign({ parse_mode: 'Markdown' }, mainMenu)
  );
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!');

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ–±'—î–∫—Ç–∏ –¥–ª—è –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ –º–æ–¥—É–ª—è
module.exports = { bot, adminOrders };
adminModule(bot, [], adminOrders);
