require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const orders = {};
const adminOrders = [];

bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üõç –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }],
        [{ text: 'üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞', callback_data: 'support' }]
      ]
    }
  });
});

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data === 'catalog') return await sendCatalog(chatId);
  if (data === 'support') {
    return bot.sendMessage(chatId, '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞: @josnik_lamer');
  }

  if (data.startsWith('buy_')) {
    const productId = data.split('_')[1];
    orders[chatId] = { productId, step: 'name' };

    return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *—ñ–º º—è*:', { parse_mode: 'Markdown' });
  }

  bot.answerCallbackQuery(query.id);
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!orders[chatId]) return;

  const order = orders[chatId];

  if (order.step === 'name') {
    order.name = text;
    order.step = 'phone';
    return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*:', { parse_mode: 'Markdown' });
  }

  if (order.step === 'phone') {
    order.phone = text;
    order.step = 'address';
    return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å *–∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏*:', { parse_mode: 'Markdown' });
  }

  if (order.step === 'address') {
    order.address = text;
    order.step = 'done';

    const productInfo = await getProductInfo(order.productId);
    const orderText = `üõí *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n\n–¢–æ–≤–∞—Ä: ${productInfo?.name || 'ID ' + order.productId}\n–Ü–º º—è: ${order.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}\n–ê–¥—Ä–µ—Å–∞: ${order.address}`;

    await bot.sendMessage(process.env.ADMIN_CHAT_ID, orderText, { parse_mode: 'Markdown' });
    await bot.sendMessage(chatId, '‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! –ú–∏ –∑–≤ º—è–∂–µ–º–æ—Å—å –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.');

    delete orders[chatId];
  }
});

async function sendCatalog(chatId) {
  try {
    const res = await axios.get('https://my.prom.ua/api/v1/products/list', {
      headers: {
        Authorization: `Bearer ${process.env.PROM_TOKEN}`
      },
      params: {
        shop_id: process.env.PROM_SHOP_ID,
        limit: 5
      }
    });

    const products = res.data.products || [];

    if (!products.length) {
      return bot.sendMessage(chatId, '–ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.');
    }

    for (const product of products) {
      const caption = `*${product.name}*\n–¶—ñ–Ω–∞: ${product.price} –≥—Ä–Ω\n[–î–µ—Ç–∞–ª—ñ](${product.url})`;
      const image = product.main_image?.url_original;

      const inline_keyboard = [[
        { text: 'üõí –ö—É–ø–∏—Ç–∏', callback_data: `buy_${product.id}` }
      ]];

      if (image) {
        await bot.sendPhoto(chatId, image, {
          caption,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard }
        });
      } else {
        await bot.sendMessage(chatId, caption, {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard }
        });
      }
    }
  } catch (err) {
    console.error(err.response?.data || err.message);
    bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤.');
  }
}

async function getProductInfo(id) {
  try {
    const res = await axios.get(`https://my.prom.ua/api/v1/products/${id}`, {
      headers: {
        Authorization: `Bearer ${process.env.PROM_TOKEN}`
      }
    });
    return res.data.product;
  } catch {
    return null;
  }
}


const mainMenu = {
  reply_markup: {
    keyboard: [['üõç –ö–∞—Ç–∞–ª–æ–≥', 'üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'], ['‚òéÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞']],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

const lastMenuMessage = {};

bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, '–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é:', mainMenu).then(sent => {
    lastMenuMessage[msg.chat.id] = sent.message_id;
  });
});

bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text.startsWith('/')) return; // –Ω–µ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏ —Ç—É—Ç

  if (lastMenuMessage[chatId]) {
    bot.deleteMessage(chatId, lastMenuMessage[chatId]).catch(() => {});
  }

  if (text === 'üõç –ö–∞—Ç–∞–ª–æ–≥') {
    bot.sendMessage(chatId, '–û—Å—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤...', mainMenu).then(sent => {
      lastMenuMessage[chatId] = sent.message_id;
    });
  } else if (text === 'üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è') {
    bot.sendMessage(chatId, '–û—Å—å –≤–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...', mainMenu).then(sent => {
      lastMenuMessage[chatId] = sent.message_id;
    });
  } else if (text === '‚òéÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞') {
    bot.sendMessage(chatId, '–ó–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏: @josnik_lamer', mainMenu).then(sent => {
      lastMenuMessage[chatId] = sent.message_id;
    });
  }
});


// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∫–∏
require('./admin')(bot, orders, adminOrders);
