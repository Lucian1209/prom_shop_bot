module.exports = function (bot, orders, adminOrders) {
  bot.onText(/\/admin/, (msg) => {
    if (msg.chat.id.toString() !== process.env.ADMIN_CHAT_ID) return;

    bot.sendMessage(msg.chat.id, '–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üßæ –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'admin_orders' }],
          [{ text: 'üì¢ –†–æ–∑—Å–∏–ª–∫–∞ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)', callback_data: 'admin_broadcast' }],
          [{ text: '‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)', callback_data: 'admin_add' }]
        ]
      }
    });
  });

  bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data === 'admin_orders') {
      if (chatId.toString() !== process.env.ADMIN_CHAT_ID) return;
      if (adminOrders.length === 0) {
        return bot.sendMessage(chatId, '–ó–∞–º–æ–≤–ª–µ–Ω—å –ø–æ–∫–∏ –Ω–µ–º–∞—î.');
      }

      const last = adminOrders.slice(-5).reverse();
      const message = last.map((o, i) =>
        `#${last.length - i}: ${o.product}\n${o.name}, ${o.phone}\n${o.address}`
      ).join('\n\n');

      return bot.sendMessage(chatId, `üßæ *–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n${message}`, { parse_mode: 'Markdown' });
    }
  });
};