module.exports = function (bot, orders, adminOrders) {
  const broadcastState = {};
  const addProductState = {};

  bot.onText(/\/admin/, (msg) => {
    if (msg.chat.id.toString() !== process.env.ADMIN_CHAT_ID) return;

    bot.sendMessage(msg.chat.id, '–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üßæ –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'admin_orders' }],
          [{ text: 'üì¢ –†–æ–∑—Å–∏–ª–∫–∞', callback_data: 'admin_broadcast' }],
          [{ text: '‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä', callback_data: 'admin_add' }]
        ]
      }
    });
  });

  bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (chatId.toString() !== process.env.ADMIN_CHAT_ID) return;

    if (data === 'admin_orders') {
      if (adminOrders.length === 0) {
        return bot.sendMessage(chatId, '–ó–∞–º–æ–≤–ª–µ–Ω—å –ø–æ–∫–∏ –Ω–µ–º–∞—î.');
      }

      const last = adminOrders.slice(-5).reverse();
      const message = last.map((o, i) =>
        `#${last.length - i}: ${o.product}\n${o.name}, ${o.phone}\n${o.address}`
      ).join('\n\n');

      return bot.sendMessage(chatId, `üßæ *–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n${message}`, { parse_mode: 'Markdown' });
    }

    if (data === 'admin_broadcast') {
      broadcastState[chatId] = true;
      return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:');
    }

    if (data === 'admin_add') {
      addProductState[chatId] = { step: 'name' };
      return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:');
    }
  });

  bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –†–æ–∑—Å–∏–ª–∫–∞
    if (broadcastState[chatId]) {
      broadcastState[chatId] = false;
      bot.sendMessage(chatId, '–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...');
      // –¢—É—Ç –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è userId –¥–µ—Å—å —ñ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —ó–º
      // –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É
      bot.sendMessage(chatId, '–¢–µ—Å—Ç–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞: ' + text);
      return;
    }

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    if (addProductState[chatId]) {
      const state = addProductState[chatId];

      if (state.step === 'name') {
        state.name = text;
        state.step = 'price';
        return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (–≤ –≥—Ä–Ω):');
      }

      if (state.step === 'price') {
        state.price = text;
        state.step = 'desc';
        return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:');
      }

      if (state.step === 'desc') {
        const product = {
          name: state.name,
          price: state.price,
          description: text
        };
        delete addProductState[chatId];

        return bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ:

*${product.name}*
–¶—ñ–Ω–∞: ${product.price} –≥—Ä–Ω
–û–ø–∏—Å: ${product.description}`, {
          parse_mode: 'Markdown'
        });
      }
    }
  });
};